@use 'sass:map';
@use './colors-vars' as *;

// This color function makes it easy for you to call a color by it's
// functional name anywhere you need.
// E.g. to use the `text` color, you type: `color: clr(text);`
// How it works:
// This function works in conjunction with the dynamic css custom properties
// defined in the _01-color-definitions.scss. The item called in the
// function is prefixed with `var(--c-` to call the custom property for that color.
// E.g. `color: clr(text);` will return `color: hsla(var(--c-text), 1);`
// This function also accepts an alpha number argument that will
// return the color value as (hsl or rgb) + alpha.
@function clr($name, $variant: null, $alpha: 1) {
  @if $variant != null {
    @if map-has-key($color-palette, $name) {
      @if type-of(map.get($color-palette, $name)) == map {
        @if map-has-key(map.get($color-palette, $name), '' + $variant) {
          @if $alpha == 1 {
            @return var(--c-#{'' + $name + '-' + $variant});
          } @else {
            @return rgba(
              map.get(map.get($color-palette, $name), '' + $variant),
              $alpha
            );
          }
        }
      }
    }
    @error 'Color does not exist in the $color-palette.'
      + ' See _colors-vars.scss for available parameters.';
  } @else {
    @return var(--c-#{'' + $name});
  }
}

// Create CSS custom properties
:root {
  // Create custom properties for default colors
  @each $name, $color in $color-palette {
    @if type-of($color) == map {
      @each $variant, $value in $color {
        --c-#{'' + $name}-#{$variant}: #{$value};
      }
    } @else {
      --c-#{'' + $name}: #{$color};
    }
  }
}
