// Sass map to define colors. Each set should have a "Dark" variation when required.
// e.g. `default` and `default-dark`. Or `purple` and `purple-dark`.
$button-colors: (
  primary: (
    bg: transparent,
    text: clr(grayscale, 900),
    border: clr(primary, 800),
    bg-hover: clr(primary, 800),
    border-hover: clr(primary, 800),
  ),
  primary-dark: (
    bg: transparent,
    text: clr(grayscale, 0),
    border: clr(primary, 800),
    bg-hover: clr(primary, 800),
    border-hover: clr(primary, 800),
  ),
  secondary: (
    bg: clr(grayscale, 0),
    border: clr(primary, 800),
    text: clr(primary-dark, 1000),
    bg-hover: clr(grayscale, 1000),
    border-hover: clr(grayscale, 1000),
  ),
  secondary-dark: (
    bg: clr(grayscale, 0),
    border: clr(grayscale, 0),
    text: clr(primary-dark, 1000),
    bg-hover: clr(grayscale, 800),
    border-hover: clr(grayscale, 800),
  ),
);

// Mixin to define colors for one or more schemes.
// Simply pass the color scheme to the mixin to get the colors defined in the map.
// e.g. @include buttonColors(default) will get all of the colors defined in the "default" section.
@mixin buttonColors(
  $scheme,
  $pallate: map-get($button-colors, $scheme),
  $map: $button-colors
) {
  z-index: 0;
  position: relative;
  transition-property: background-color, box-shadow;
  transition-duration: 0.25s;
  color: map-get($pallate, text);
  background-color: map-get($pallate, bg);
  border: 1.5px solid map-get($pallate, border);

  &:visited {
    color: map-get($pallate, text);
  }

  &::before {
    content: "";
    top: 0;
    left: 0;
    width: 0;
    z-index: -1;
    height: 100%;
    position: absolute;
    background-color: map-get($pallate, bg-hover);
    transition: width 0.25s;

    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }

  &:hover {
    color: clr(grayscale, 0);
    border: 1.5px solid map-get($pallate, border-hover);

    &::before {
      width: 100%;
    }

    .button__icon {
      color: clr(grayscale, 0);
      stroke-width: 0.5px;
      stroke: clr(grayscale, 0);
    }
  }

  &:focus {
    border: transparent;
    outline-offset: -4px;
    @include default-focus();
  }
}

// The button-base mixin contains styles that apply to all buttons
// regardless of color or size.
@mixin button-base {
  cursor: pointer;
  align-items: center;
  display: inline-flex;
  text-decoration: none;
  letter-spacing: 0.1em;
  min-height: px2rem(56);
  font-size: fontsize(14);
  text-transform: uppercase;
  font-weight: $font-medium;
  padding: space(1) space(2);

  &:hover {
    .button__icon--animated {
      transform: scaleX(0.8);

      @media (prefers-reduced-motion: reduce) {
        transform: unset;
      }
    }
  }

  &[class*='secondary'] {
    min-height: px2rem(40);
    padding: px2rem(10) px2rem(14);
  }
}

// Button color variations
// Note how we include dark mode options for each
@mixin button-color-primary {
  @include buttonColors(primary);

  &--dark {
    @include buttonColors(primary-dark);
  }
}

@mixin button-color-secondary {
  @include buttonColors(secondary);

  &-dark {
    @include buttonColors(secondary-dark);
  }
}

.button {
  @include button-base;
  @include button-color-primary;

  &--secondary {
    @include button-color-secondary;
  }
}

.button__icon {
  color: inherit;
  width: px2rem(16);
  height: px2rem(16);
  margin-left: space(1);

  &[class*='secondary'] {
    width: px2rem(14);
    height: px2rem(14);
  }

  &--animated {
    width: px2rem(28);
    height: px2rem(12);
    transform-origin: 0% 50%;
    transition: 0.25s cubic-bezier(0.47, 1.64, 0.41, 0.8);
  }
}

.button_wrapper {
  @extend .button;

  padding: 0;

  &:hover {
    input {
      color: clr(grayscale, 0);
    }

    svg {
      transform: scaleX(0.8);

      @media (prefers-reduced-motion: reduce) {
        transform: none;
      }
    }
  }

  input {
    @extend .label--md;

    z-index: 1;
    width: 100%;
    height: 100%;
    border: none;
    background: none;
    text-align: left;
    min-height: space(3.5);
    white-space: break-spaces;
    padding: space(1) space(4.5) space(1) space(2);
    cursor: pointer;
    color: inherit;

    &:focus {
      border: transparent;
      outline-offset: -3px;
      outline: 4px solid clr(secondary, 700);
    }
  }

  svg {
    right: space(2);
    width: px2rem(28);
    height: px2rem(12);
    position: absolute;
    transform-origin: 0% 50%;
    transition: 0.25s cubic-bezier(0.47, 1.64, 0.41, 0.8);
  }
}

// Input Variant.
form.bg-black {
  .button {
    @extend .button--dark;
  }

  input {
    color: clr(grayscale, 0);
  }
}
