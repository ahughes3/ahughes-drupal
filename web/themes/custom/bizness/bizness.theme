<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme_suggestions_alter().
 */
function bizness_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

  // Create a page suggestion per content type.
  if ($hook === 'page') {
    $route_name = Drupal::routeMatch()->getRouteName();

    // NOTE: once https://www.drupal.org/node/2730631 is committed to D8, we can
    // simplify and go back to:
    // $node = \Drupal::routeMatch()->getParameter('node')
    // Currently the node revision routes do not convert the node parameter to
    // a full object, hence we require this verbose workaround to ensure
    // we start with a scalar in both cases.
    $node_id = Drupal::routeMatch()->getRawParameter('node');
    if ($node_id && ($node = Node::load($node_id))) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__' . $content_type;
    }

    // Template for 404 page.
    if ($route_name == 'system.404') {
      $suggestions[] = 'page__404';
    }

    // Template for 403 page.
    if ($route_name == 'system.403') {
      $suggestions[] = 'page__404';
    }
  }

  if ($hook === 'field') {
    $field_name = $variables['element']['#field_name'];
    $field_type = $variables['element']['#field_type'];
    $field_entity_type = $variables['element']['#entity_type'];
    $field_entity_bundle = $variables['element']['#bundle'];
    // For fields in block that are added from layout builder.
    $field_view_mode = $variables['element']['#view_mode'] == 'default' ? 'full' : $variables['element']['#view_mode'];

    // Redo field suggestions for fields.
    $suggestions = [
      $hook .
      '__' . $field_type,
      $hook .
      '__' . $field_name,
      $hook .
      '__' . $field_entity_type .
      '__' . $field_name,
      $hook .
      '__' . $field_name .
      '__' . $field_view_mode,
      $hook .
      '__' . $field_entity_type .
      '__' . $field_name .
      '__' . $field_entity_bundle,
      $hook .
      '__' . $field_entity_type .
      '__' . $field_name .
      '__' . $field_entity_bundle .
      '__' . $field_view_mode,
    ];

    /* Least specific suggestions */
    switch ($field_name) {
      case 'field_media_image':
      case 'field_hero_media':
      case 'field_promo_media':
      case 'field_episode_guests':
      case 'field_show_hero_background_image':
        $suggestions[] = 'field__bare';
    }

    if ($field_entity_type == 'node') {
      switch ($field_entity_bundle) {
        case 'case_study':
          switch ($field_name) {
            case 'field_topics':
              $suggestions[] = 'field__li';
          }
        case 'bio':
          switch ($field_name) {
            case 'field_bio_expertise':
              $suggestions[] = 'field__li';
          }
        case 'episode':
          switch ($field_name) {
            case 'field_episode_number':
              $suggestions[] = 'field__span';
          }
      }

      if ($field_view_mode != 'full') {
        switch ($field_entity_bundle) {
          case 'article' || 'announcement':
            switch ($field_name) {
              case 'field_topics':
                $suggestions[] = 'field__li';
            }
        }
      }
    }

    if ($field_entity_type == 'paragraph') {
      switch ($field_entity_bundle) {
        case 'custom_promo':
          switch ($field_name) {
            case 'field_title':
            case 'field_subtitle':
            case 'field_promo_image':
              $suggestions[] = 'field__bare';
          }
      }
    }
  }

  // Create a block suggestion per custom block type.
  if ($hook === 'block') {
    // The array index 0 is added for the blocks added through entity browser.
    if (
      isset($variables['elements']['content']['#block_content']) ||
      isset($variables['elements']['content'][0]['#block_content'])
    ) {
      $bundle = '';
      $view_mode = '';
      if (isset($variables['elements']['content']['#block_content'])) {
        $bundle = $variables['elements']['content']['#block_content']->bundle();
        $view_mode = $variables['elements']['content']["#view_mode"];
      }
      elseif (isset($variables['elements']['content'][0]['#block_content'])) {
        $bundle = $variables['elements']['content'][0]['#block_content']->bundle();
        $view_mode = $variables['elements']['content'][0]["#view_mode"];
      }

      $view_mode = ($view_mode == 'full') ? 'default' : $view_mode;

      array_splice($suggestions, 2, 0, 'block__type__' . $bundle . '__' . $view_mode);
    }
  }
}

/**
 * Implements hook_preprocess_region().
 */
function bizness_preprocess_region(&$variables) {
  if ($variables['region'] === 'footer') {
    // Footer - lets talk variables.
    $lets_talk_config = \Drupal::config('bizness_admin_ui.lets_talk_settings');
    $variables['footer_lets_talk_pre_title'] = $lets_talk_config->get('pre_title');
    $variables['footer_lets_talk_title'] = $lets_talk_config->get('title');
    $variables['footer_lets_talk_description'] = $lets_talk_config->get('description');
    $variables['footer_lets_talk_link_text'] = $lets_talk_config->get('link_text');
    $variables['footer_lets_talk_link_url'] = $lets_talk_config->get('link_url');
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function bizness_preprocess_layout(&$variables) {
  $variables['layout_class'] = '';
  foreach ($variables['content']['content'] as $component) {
    // Exceptions to the section padding rules:
    // If a section contains any of the following components,
    // add a class to remove the padding.
    if (
      ($component['#configuration']['id'] == 'inline_block:hero' && $component['#configuration']['view_mode'] == 'homepage') ||
      ($component['#configuration']['id'] == 'inline_block:marketing' && $component['#configuration']['view_mode'] == 'what_we_do') ||
      ($component['#configuration']['id'] == 'entity_browser_block:content_browser_modal' && $component['content'][0]['#view_mode'] == 'homepage') ||
      ($component['#configuration']['id'] == 'views_block:resources-featured_resources_homepage')
      ) {
      $variables['layout_class'] = 'layout--no-padding';
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function bizness_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];

  if ($node->bundle() === 'article') {
    $variables['content']['author_names'] = [];
    $variables['content']['about_authors'] = [];
    foreach ($node->field_authors as $author) {
      $variables['content']['about_authors'][] = Drupal::entityTypeManager()->getViewBuilder('node')->view($author->entity, 'teaser');
      $variables['content']['author_names'][] = [
        'name' => $author->entity->label(),
        'url' => $author->entity->toUrl()->toString(),
      ];
    }
  }
  $case_study_view_modes = [
    'promo',
    'teaser',
  ];

  if ($node->bundle() === 'case_study' && in_array($view_mode, $case_study_view_modes)) {
    if (!empty($node->field_client->entity)) {
      $client_id = $node->field_client->getValue()[0]['target_id'];
      $entity = \Drupal::entityTypeManager()->getStorage('client')->load($client_id);
      $media = $entity->field_client_logo->entity;
      $image_uri = $media->field_media_image_1->entity->getFileUri();
      $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
      $alt_image = $media->field_media_image_1->getValue()[0]['alt'];
      $variables['client_name'] = $entity->label();
      $variables['client_image'] = [
        'src' => $image_url,
        'alt' => $alt_image,
      ];
    }
    if (!empty($node->field_promo_media->entity)) {
      $media = $node->field_promo_media->entity;
      $image_uri = $media->field_media_image->entity->getFileUri();
      $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
      $alt_image = $media->field_media_image->getValue()[0]['alt'];
      $variables['featured_image'] = [
        'src' => $image_url,
        'alt' => $alt_image,
      ];
    }
  }

  if ($node->bundle() === 'episode') {
    if (!empty($node->field_parent->entity)) {
      $parent = $node->field_parent->entity;
      $field_image = $parent->field_show_hero_background_image->entity;
      if (!empty($field_image)) {
        $variables['content']['podcast_label'] = $parent->label();
        $variables['content']['podcast_url'] = $parent->toUrl()->toString();
        $variables['content']['podcast_image'] = [
          'alt' => $field_image->alt,
          'src' => $field_image->getFileUri(),
        ];
      }
    }
  }

  if ($node->bundle() === 'bio') {
    $social_field_names = [
      'twitter' => 'field_bio_link_twitter',
      'linkedin' => 'field_bio_link_linkedin',
      'github' => 'field_bio_link_github',
      'facebook' => 'field_bio_link_facebook',
      'drupal' => 'field_bio_link_drupalorg',
      'dribbble' => 'field_bio_link_dribbble',
    ];
    $social_prefixes = [
      'twitter' => 'https://twitter.com/',
      'linkedin' => 'https://www.linkedin.com/',
      'github' => 'https://github.com/',
      'facebook' => 'https://facebook.com/',
      'drupal' => 'https://www.drupal.org/u/',
      'dribbble' => 'https://dribbble.com/',
    ];

    foreach ($social_field_names as $social_network => $field_name) {
      if (!$node->get($field_name)->isEmpty()) {
        $field_data = $node->get($field_name)->getValue();

        if (str_contains($field_data[0]['value'], 'https://')) {
          $social_href = $field_data[0]['value'];
        }
        else {
          $social_href = $social_prefixes[$social_network] . $field_data[0]['value'];
        }

        $variables['social_info'][] = [
          'href' => $social_href,
          'icon' => $social_network,
        ];
      }
    }

    if (!$node->field_first_name->isEmpty()) {
      $first_name = $node->field_first_name->getValue();
      // Don't add 's if the name ends with an s.
      if (substr($first_name[0]['value'], -1) == 's') {
        $variables['expertise_heading'] = $first_name[0]['value'] . '’ Expertise';
      }
      else {
        $variables['expertise_heading'] = $first_name[0]['value'] . '’s Expertise';
      }
    }
    else {
      $variables['expertise_heading'] = 'Expertise';
    }
  }

  if ($node->field_parent && !$node->field_parent->isEmpty()) {
    $parent = Node::load($node->field_parent->getValue()[0]['target_id']);
    $variables['parent']['url'] = $parent->toUrl()->setAbsolute()->toString();
    $variables['parent']['text'] = $parent->label();
  }
}

/**
 * Implements template_preprocess_book_navigation().
 */
function bizness_preprocess_book_navigation(array &$variables) {
  $variables['tree'] = [];
  $book_link = $variables['book_link'];
  $book_outline = \Drupal::service('book.outline');
  $children = $book_outline->childrenLinks($book_link);
  foreach ($children['#items'] as $nid => $child) {
    $topics = [];
    $authors = [];
    $node = Node::load($nid);

    foreach ($node->field_topics as $topic) {
      $topics[] = [
        'title' => $topic->entity->label(),
        'url' => $topic->entity->toUrl()->toString(),
      ];
    }

    foreach ($node->field_authors as $author) {
      $authors[] = [
        'name' => $author->entity->label(),
        'url' => $author->entity->toUrl()->toString(),
      ];
    }

    $variables['tree'][] = [
      'results_teaser__topics_list' => $topics,
      'results_teaser__type' => $node->bundle(),
      'results_teaser__title' => $node->label(),
      'results_teaser__url' => $node->toUrl()->toString(),
      'results_teaser__description' => $node->field_deck->value,
      'results_teaser__date' => date('F j, Y', $node->getCreatedTime()),
      'results_teaser__authors' => $authors,
    ];
  }
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function bizness_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];

  if ($view->id() === 'case_study' && $view->current_display === 'block_bio') {
    $node = \Drupal::request()->attributes->get('node');
    $variables['views_title'] = 'Featured work ...';
    $variables['bio_id'] = $node->id();
    if ($node->bundle() === 'bio' && !$node->field_first_name->isEmpty()) {
      $first_name = $node->field_first_name->value;
      if (substr($first_name, -1) == 's') {
        $variables['views_title'] = $first_name . '’ ' . $variables['views_title'];
      }
      else {
        $variables['views_title'] = $first_name . '’s ' . $variables['views_title'];
      }
    }
  }
  elseif ($view->id() === 'you_may_also_enjoy' && $view->current_display === 'resources_author_block') {
    // Getting already node loaded from the request.
    $node = \Drupal::request()->attributes->get('node');
    $variables['views_title'] = t('Featured resources ...');
    $variables['more_by_url'] = '/resources';
    $variables['more_by'] = t('More ...');
    if ($node && !$node->field_first_name->isEmpty()) {
      $first_name = $node->field_first_name->value;
      $variables['views_title'] = t('Featured resources by @name', ['@name' => $first_name]);
      $variables['more_by'] = t('More by @name', ['@name' => $first_name]);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function bizness_preprocess_page(&$variables) {
  if (isset($variables['node']) && $variables['node'] instanceof Node) {
    $node = $variables['node'];
    $node_bundles = [
      'announcement',
      'article',
      'case_study',
    ];

    // Set an abbreviated footer for the above content types.
    if (in_array($node->bundle(), $node_bundles, TRUE)) {
      $variables['page']['footer']['#abbreviated'] = TRUE;
    }
    elseif ($node->bundle() === 'section') {
      if (isset($node->field_footer_simplified) && !empty($node->field_footer_simplified)) {
        $footer_simplified = $node->field_footer_simplified[0]->value;
        if ($footer_simplified == TRUE) {
          $variables['page']['footer']['#abbreviated'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function bizness_preprocess_views_view(&$variables) {
  if ($variables['id'] === 'resources' && $variables['display_id'] === 'resources_list_block') {
    // If there are query parameters into the current URL the featured resouces
    // view attachment should be hidden.
    if (\Drupal::request()->query->all()) {
      unset($variables['attachment_before']);
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function bizness_preprocess_block(&$variables) {

  /*
   * This extra array index condition is added for the
   * blocks added through entity browser.
   */
  if (isset($variables['elements']['content'][0]) && !empty($variables['elements']['content'][0])) {
    $content = $variables['elements']['content'][0];
  }
  else {
    $content = $variables['elements']['content'];
  }

  // Variables for hero block component.
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $block = $content['#block_content'];
    $bundle = $block->bundle();
    if ($bundle == 'hero') {
      $node = \Drupal::request()->attributes->get('node');

      if (isset($node) && $node instanceof Node) {
        $variables['title'] = $block->field_title->value ?? $node->label();
        $variables['display_title'] = $block->field_display_title->value ?? $node->field_display_title->value;
        $variables['disable_typewriter'] = $node->field_disable_typewriter->value == 1 ? TRUE : FALSE;
        $variables['lead'] = $block->field_lead->value ?? $node->field_lead->value;
        $variables['deck'] = $block->field_deck_allows_links->processed ?? $node->field_deck->value;
        $variables['featured_link_icon'] = $block->field_text->value;
        $variables['typewriter_effect'] = $node->field_hero_typewriter_effect->value;
        $variables['typewriter_stationary_text'] = $node->field_hero_stationary_text->value;
        if ($node->field_hero_typewriter_text) {
          $typewriter_values = [];
          foreach ($node->field_hero_typewriter_text->getValue() as $typewriter_item) {
            $typewriter_values[] = $typewriter_item['value'];
          }
        }
        $variables['typewriter_text'] = $typewriter_values;
        $variables['typewriter_aria_label'] = $node->field_hero_typewriter_aria_label->value;

        if (isset($block->field_primary_cta->getValue()[0]['uri']) && !empty($block->field_primary_cta->getValue()[0]['uri'])) {
          $variables['primary_cta']['url'] = $block->field_primary_cta[0]->getUrl()->toString();
          $variables['primary_cta']['text'] = $block->field_primary_cta->getValue()[0]['title'];
        }
        elseif (isset($node->field_primary_cta->getValue()[0]['uri']) && !empty($node->field_primary_cta->getValue()[0]['uri'])) {
          $variables['primary_cta']['url'] = $node->field_primary_cta[0]->getUrl()->toString();
          $variables['primary_cta']['text'] = $node->field_primary_cta->getValue()[0]['title'];
        }

        if (isset($block->field_secondary_cta->getValue()[0]['uri']) && !empty($block->field_secondary_cta->getValue()[0]['uri'])) {
          $variables['secondary_cta']['url'] = $block->field_secondary_cta[0]->getUrl()->toString();
          $variables['secondary_cta']['text'] = $block->field_secondary_cta->getValue()[0]['title'];
        }
        elseif (isset($node->field_secondary_cta->getValue()[0]['uri']) && !empty($node->field_secondary_cta->getValue()[0]['uri'])) {
          $variables['secondary_cta']['url'] = $node->field_secondary_cta[0]->getUrl()->toString();
          $variables['secondary_cta']['text'] = $node->field_secondary_cta->getValue()[0]['title'];
        }

        // Get parent node to create breadcrumbs.
        if (!$node->field_parent->isEmpty()) {
          $parent = Node::load($node->field_parent->getValue()[0]['target_id']);
          $variables['parent']['url'] = $parent->toUrl()->setAbsolute()->toString();
          $variables['parent']['text'] = $parent->label();
        }

        if (!$block->field_clients->isEmpty()) {
          foreach ($block->field_clients->getValue() as $client) {
            $entity = \Drupal::entityTypeManager()->getStorage('client')->load($client['target_id']);
            $media = $entity->field_client_logo->entity;
            $image_uri = $media->field_media_image_1->entity->getFileUri();
            $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
            $alt_image = $media->field_media_image_1->getValue()[0]['alt'];
            $variables['clients'][] = [
              'src' => $image_url,
              'alt' => $alt_image,
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_field().
 */
function bizness_preprocess_field(&$variables, $hook) {
  if ($variables['field_name'] == 'field_episode_guests') {
    if ($variables['element']['#bundle'] == 'webinar') {
      $variables['guests_title'] = 'Webinar Presenters';
    }
    elseif ($variables['element']['#bundle'] == 'episode') {
      $variables['guests_title'] = 'Episode Guests';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bizness_preprocess_input(&$variables) {
  $variables['input_type'] = $variables['attributes']['type'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bizness_preprocess_form_element(&$variables) {
  $variables['field_type'] = $variables['type'];
  $variables['is_input'] = $variables['element']['#input'];
}
